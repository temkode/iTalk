type Query {
  info: String!
  listingFeed(
    filter: String,
    categoryId: Int, 
    skip: Int, 
    take: Int,
    orderBy: ListingOrderByInput
  ): listingFeed!
  # me # return currently logged in user
  # connectionRequests():
}

type listingFeed {
  listings: [Listing!]!,
  count: Int
}

type Mutation {
  login(email: String!, passwordHash: String!): AuthPayload
  signup(
    email: String!, 
    passwordHash: String!, 
    lastName: String!, 
    firstName: String!
  ): AuthPayload
  postListing(
    contactInfo: String!, 
    teachingBio: String!,
    teachingStyle: String,
    teachingMaterial: String,
    trialRate: Int,
    rate: Int!,
    interval: String!,
    categoryId: Int!,
    isPro: Boolean!,
    videoUrl: String
  ): Listing
#   # requestConnection(TeacherID) # get current user from context not arguments, 
#   # link itself not ocnfirming, link to approval page with student info
#   # respondConnection   #
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  bio: String
  joinedAt: DateTime!
  isAdmin: Boolean!
  passwordHash: String!

  picture: Media
  notifications: [Notification!]!
  connRequestsSent: [ConnectionRequest!]!
  interests: [Category!]!
  listingsEnrolled: [Listing!]!
  listingsPosted: [Listing!]!
}

type Media {
  id: ID!
  type: MediaType!
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Notification {
  id: ID!
  url: String
  createdAt: DateTime!
  message: String!
  isUnread: Boolean!

  recipient: User!
  sender: User
}

type ConnectionRequest {
  id: ID!
  createdAt: DateTime!
  state: RequestState!

  from: User!
  listing: Listing!
}

type Category {
  id: ID!
  name: String!

  listings: [Listing!]!
  usersInterested: [User!]!
}

type Listing {
  id: ID!
  contactInfo: String!
  isPro: Boolean!
  teachingBio: String!
  teachingStyle: String
  teachingMaterial: String
  trialRate: Int
  rate: Int!
  interval: String!
  createdAt: DateTime!

  students: [User!]!
  teacher: User!
  connReqs: [ConnectionRequest!]!
  video: Media
  category: Category!
}

input ListingOrderByInput {
  rate: Sort
  createdAt: Sort
  students: Sort
}

enum Sort {
  asc
  desc
}

enum MediaType {
  VIDEO
  IMAGE
}

enum RequestState {
  ACTIVE
  ACCEPTED
  REJECTED
}

scalar DateTime